import { defineEventHandler, readBody } from "h3";

// Define the JSON structure we expect from GPT-4V
interface GptResponse {
  story_template: string; // Story with [CHARACTER] placeholder
  character_description: string; // Description of the character
  dalle_prompt: string;
}

export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig();
  const openAiApiKey = config.openAiApiKey;

  if (!openAiApiKey) {
    // Server-side error, API key not configured
    throw createError({
      statusCode: 500,
      statusMessage: "OpenAI API key is not configured.",
    });
  }

  const { image: base64Image } = await readBody(event);

  if (!base64Image) {
    // Client-side error, no image provided
    throw createError({
      statusCode: 400,
      statusMessage: "No image provided.",
    });
  }

  try {
    // --- First API Call: Use GPT-4V to generate story template and DALL-E prompt ---
    console.log(
      "Step 1: Calling GPT-4V to generate story template and DALL-E prompt..."
    );

    const gptResponse = await fetch(
      "https://api.openai.com/v1/chat/completions",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${openAiApiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o",
          response_format: { type: "json_object" },
          messages: [
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: 'You are a creative and imaginative children\'s picture book author. Look at what is in this image and use it as the main character. Complete three tasks:\n\n1. Write a warm, healing fairy tale story opening in English (no more than 80 words) with a magical, Studio Ghibli-style tone. Use the placeholder "[CHARACTER]" where the character\'s name should appear. For example: "In a cozy corner of a forgotten bookshop, [CHARACTER] sat quietly, dreaming of adventures..."\n\n2. Describe the character\'s appearance and personality in one sentence (e.g., "a shy coffee cup with warm brown tones and gentle eyes").\n\n3. Generate a detailed English prompt for DALL-E 3 to create a warm, healing picture book illustration.\n\nReturn a JSON object: { "story_template": "your story with [CHARACTER] placeholder", "character_description": "description of the character", "dalle_prompt": "detailed DALL-E 3 prompt..." }. Ensure clean JSON with no markdown.',
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:image/jpeg;base64,${base64Image}`,
                  },
                },
              ],
            },
          ],
          max_tokens: 600,
        }),
      }
    );

    if (!gptResponse.ok) {
      const errorData = await gptResponse.json();
      console.error("OpenAI GPT-4V API Error:", errorData);
      throw new Error("Failed to get a valid response from GPT-4V.");
    }

    const gptData = await gptResponse.json();
    // GPT may return JSON string with markdown, which needs parsing
    const contentString = gptData.choices[0]?.message?.content;
    const responseObject: GptResponse = JSON.parse(contentString);

    const { story_template, character_description, dalle_prompt } =
      responseObject;

    if (!story_template || !character_description || !dalle_prompt) {
      throw new Error("Invalid JSON structure from GPT-4V.");
    }

    console.log("Step 1 Success. Story Template:", story_template);
    console.log(
      "Step 1 Success. Character Description:",
      character_description
    );
    console.log("Step 1 Success. DALL-E Prompt:", dalle_prompt);

    // --- Second API Call: Use DALL-E 3 to generate image ---
    console.log("Step 2: Calling DALL-E 3 to generate image...");

    // const dalleResponse = await fetch(
    //   "https://api.openai.com/v1/images/generations",
    //   {
    //     method: "POST",
    //     headers: {
    //       "Content-Type": "application/json",
    //       Authorization: `Bearer ${openAiApiKey}`,
    //     },
    //     body: JSON.stringify({
    //       model: "dall-e-3",
    //       prompt: dalle_prompt, // Use the prompt generated by GPT-4V
    //       n: 1,
    //       size: "1024x1024", // DALL-E 3 supported size
    //       quality: "standard",
    //     }),
    //   }
    // );

    const dalleResponse = {
      ok: true,
      statusText: "",
      json: async () => ({
        data: [{ url: "https://example.com/generated-image.png" }],
      }),
    };

    if (!dalleResponse.ok) {
      const errorData = await dalleResponse.json();
      console.error("OpenAI DALL-E 3 API Error:", errorData);
      throw new Error("Failed to generate image from DALL-E 3.");
    }

    const dalleData = await dalleResponse.json();
    const imageUrl = dalleData.data[0]?.url;

    if (!imageUrl) {
      throw new Error("Could not retrieve image URL from DALL-E 3 response.");
    }

    console.log("Step 2 Success. Image URL:", imageUrl);

    // --- Return Final Result ---
    // Return story template (with placeholder), character description, and image URL
    return {
      storyTemplate: story_template,
      characterDescription: character_description,
      imageUrl: imageUrl,
    };
  } catch (error: any) {
    console.error("An error occurred in the generation process:", error);
    // Throw a unified error format to the client
    throw createError({
      statusCode: 500,
      statusMessage: error.message || "An internal server error occurred.",
    });
  }
});
